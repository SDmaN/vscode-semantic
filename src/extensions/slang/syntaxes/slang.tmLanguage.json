{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Slang",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#imports"
        },
        {
            "include": "#module"
        },
        {
            "include": "#types"
        },
        {
            "include": "#modifiers"
        },
        {
            "include": "#keywords"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.slang"
                },
                {
                    "begin": "//",
                    "end": "\\n",
                    "name": "comment.line.slang"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                }
            ],
            "repository": {
                "strings": {
                    "name": "string.quoted.double.slang",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.slang",
                            "match": "\\\\."
                        }
                    ]
                },
                "numbers": {
                    "patterns": [
                        {
                            "match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
                            "name": "constant.numeric.decimal.slang"
                        }
                    ]
                }
            }
        },
        "modifiers": {
            "patterns": [
                {
                    "name": "storage.modifier.slang",
                    "match": "\\b(public|private|val|ref|const)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "include": "#primitive-types"
                },
                {
                    "include": "#array-types"
                }
            ],
            "repository": {
                "primitive-types": {
                    "patterns": [
                        {
                            "match": "\\b(int|real|bool)\\b",
                            "name": "storage.type.primitive.slang"
                        }
                    ]
                },
                "array-types": {
                    "patterns": [
                        {
                            "match": "\\b(array)\\b",
                            "name": "storage.type.array.slang"
                        }
                    ]
                }
            }
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.slang",
                    "match": "\\b(while|if|else|return)\\b"
                },
                {
                    "name": "keyword.fun.slang",
                    "match": "\\b(fun|proc|call)\\b"
                },
                {
                    "name": "keyword.io.slang",
                    "match": "\\b(input|output)\\b"
                },
                {
                    "name": "keyword.other.slang",
                    "match": "\\b(start|end|repeat|then|module|import)\\b"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "match": "(import)\\s+([a-zA-Z0-9]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.import.slang"
                        },
                        "2": {
                            "name": "entity.name.type.module.slang"
                        }
                    }
                }
            ]
        },
        "module": {
            "patterns": [
                {
                    "match": "(module)\\s+([a-zA-Z0-9]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.import.slang"
                        },
                        "2": {
                            "name": "entity.name.type.module.slang"
                        }
                    }
                }
            ]
        }
    },
    "scopeName": "source.slang"
}